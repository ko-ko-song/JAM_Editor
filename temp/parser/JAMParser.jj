/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;
//  DEBUG_PARSER = true;
}PARSER_BEGIN(JAMParser)package kr.ac.uos.ai.editor.jam.parser;


import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;

import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.Path;


import kr.ac.uos.ai.editor.jam.condition.Condition;
import kr.ac.uos.ai.editor.jam.condition.ExpressionCondition;
import kr.ac.uos.ai.editor.jam.condition.FactCondition;
import kr.ac.uos.ai.editor.jam.condition.RelationCondition;
import kr.ac.uos.ai.editor.jam.condition.RetrieveCondition;


import kr.ac.uos.ai.editor.jam.model.EditorModel;
import kr.ac.uos.ai.editor.jam.model.Plan;
import kr.ac.uos.ai.editor.jam.model.PlanTable;
import kr.ac.uos.ai.editor.jam.model.Prefix;
import kr.ac.uos.ai.editor.jam.model.PrefixManager;
import kr.ac.uos.ai.editor.jam.model.Relation;
import kr.ac.uos.ai.editor.jam.model.RelationTable;

import kr.ac.uos.ai.editor.jam.expression.Binding;
import kr.ac.uos.ai.editor.jam.expression.BindingValue;
import kr.ac.uos.ai.editor.jam.expression.Expression;
import kr.ac.uos.ai.editor.jam.expression.ExpressionType;
import kr.ac.uos.ai.editor.jam.expression.Function;
import kr.ac.uos.ai.editor.jam.expression.FunctionCall;
import kr.ac.uos.ai.editor.jam.expression.Functions;
import kr.ac.uos.ai.editor.jam.expression.ObjectCreation;
import kr.ac.uos.ai.editor.jam.expression.ObjectGetField;
import kr.ac.uos.ai.editor.jam.expression.Predicate;
import kr.ac.uos.ai.editor.jam.expression.PredicateFact;
import kr.ac.uos.ai.editor.jam.expression.PredicateRetrieve;
import kr.ac.uos.ai.editor.jam.expression.Symbol;
import kr.ac.uos.ai.editor.jam.expression.SymbolTable;
import kr.ac.uos.ai.editor.jam.expression.Value;
import kr.ac.uos.ai.editor.jam.expression.ValueLong;
import kr.ac.uos.ai.editor.jam.expression.ValueObject;
import kr.ac.uos.ai.editor.jam.expression.ValueReal;
import kr.ac.uos.ai.editor.jam.expression.ValueString;
import kr.ac.uos.ai.editor.jam.expression.ValueType;
import kr.ac.uos.ai.editor.jam.expression.Variable;
import kr.ac.uos.ai.editor.jam.expression.ObjectInvokeMethod;


import kr.ac.uos.ai.editor.jam.temp.NameSpace;
import kr.ac.uos.ai.editor.jam.temp.PlanConstruct;
import kr.ac.uos.ai.editor.jam.temp.PlanSequenceConstruct;
import kr.ac.uos.ai.editor.jam.temp.ReflectionUtil;

import kr.ac.uos.ai.editor.jam.action.Action;
import kr.ac.uos.ai.editor.jam.action.AchieveGoalAction;
import kr.ac.uos.ai.editor.jam.action.AssertAction;
import kr.ac.uos.ai.editor.jam.action.ConcludeGoalAction;
import kr.ac.uos.ai.editor.jam.action.FactAction;
import kr.ac.uos.ai.editor.jam.action.GoalAction;
import kr.ac.uos.ai.editor.jam.action.MaintainGoalAction;
import kr.ac.uos.ai.editor.jam.action.PerformGoalAction;
import kr.ac.uos.ai.editor.jam.action.RetractAction;
import kr.ac.uos.ai.editor.jam.action.RetrieveAction;
import kr.ac.uos.ai.editor.jam.action.UpdateAction;
import kr.ac.uos.ai.editor.jam.action.WorldmodelAction;

import kr.ac.uos.ai.editor.jam.exception.AgentRuntimeException;


public class JAMParser	{  public static void main(String args []) throws ParseException  {    JAMParser parser;
//	System.out.println("JAM definition parse successful.");

	
//	final String DEFAULT_PLAN_FOLDER = "kr.ac.uos.ai.editor.jamEditor/plan/boot.jam"; 

//	parseFile(DEFAULT_PLAN_FOLDER);
	
//	EditorModel.getInstance().getPlanManager().printAllPlans();
//	EditorModel.getInstance().getRelationManager().printAllRelations();
//	EditorModel.getInstance().getPrefixManager().printAllPrefixes();
  }

//////////////test용 
	public static Interpreter buildInterpreter(String buf) {
		JAMParser parser;
		System.out.println("JAM Parser Version 0.70: ");
		parser = new JAMParser(new ByteArrayInputStream(buf.getBytes()));

		try {
			Interpreter interpreter =	null;
			interpreter = (Interpreter) parser.ParseJamAgentDefinition(interpreter);
			System.out.println("JAM definition parse successful.");
			return interpreter;
		} catch (ParseException e) {
			System.out.println("Encountered parse exception " + e + " during parse.");
			e.printStackTrace();
			return null;
		} catch (Exception e) {
			System.out.println("Encountered other exception " + e +  " during parse.");
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Secondary JAM interface used to internalize agent constructs
	 * from strings during execution.
	 */
	public static Interpreter parseString(Interpreter interpreter, String buf) {
		JAMParser parser;
		System.out.println("JAM Parser Version 0.70: ");
		parser = new JAMParser(new ByteArrayInputStream(buf.getBytes()));

		try {
			interpreter = (Interpreter) parser.ParseJamAgentDefinition(interpreter);
			System.out.println("JAM string parse successful.");
			return interpreter;
		} catch (ParseException e) {
			System.out.println("Encountered parse exception " + e + " during parse.");
			e.printStackTrace();
			return null;
		} catch (Exception e) {
			System.out.println("Encountered other exception " + e + " during parse.");
			e.printStackTrace();
			return null;
		}
	}

	public static Interpreter parseFile(Interpreter interpreter, File file) {
		if (file == null) return null;
		String filename = null;
		Reader reader = null;
		try {
		  filename = file.getCanonicalPath();
		  reader = new FileReader(file);
		} catch (IOException e) {
		  e.printStackTrace();
		  return null;
		}

		JAMParser parser;
		System.out.println("JAM Parser Version 0.70: " + filename);
		interpreter.getNameSpaceTable().clearPrefixMap();
		parser = new JAMParser(reader);

		try {
			interpreter = (Interpreter) parser.ParseJamAgentDefinition(interpreter);
			System.out.println("JAM string parse successful.");
			return interpreter;
		} catch (ParseException e) {
			System.out.println("Encountered parse exception " + e + " during parse.");
			e.printStackTrace();
			return null;
		} catch (Exception e) {
			System.out.println("Encountered other exception " + e + " during parse.");
			e.printStackTrace();
			return null;
		}
	}
///////////////////////////////////////////////////













  
	public static void parseFile(String fileFullpath){
	  IPath path = new Path(fileFullpath);
	  IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
	  if(file.getFileExtension() == null)
	  	return;
	    
	  JAMParser.parseFile(file);
	}
	
	public static void parseFile(IFile file) {
		if (file == null) return;
		String filename = null;
		InputStream is = null;
//		System.out.println("parse file " + file);
		
		filename = file.getFullPath().toString();
		try {
		  is = file.getContents();
		} catch (CoreException e) {
		  e.printStackTrace();
		  return;
		}
	
		JAMParser parser;
	//		System.out.println("JAM Parser Version 0.70: " + filename);
	//		interpreter.getNameSpaceTable().clearPrefixMap();
		parser = new JAMParser(is);
	
		try {
			parser.parseJAM(filename);
			System.out.println("JAM parser : " + filename+ " JAM File parse successful.");
			return;
		} catch (ParseException e) {
       		System.out.println("Encountered parse exception " + e + " during parse.");
            System.out.println("next token : " + parser.getNextToken());
            System.out.println("current token : " + e.currentToken);
            //e를 print하면 expected token을 알려줌
             for(int i=0; i<e.expectedTokenSequences.length; i++) {
                for(int j=0; j<e.expectedTokenSequences[i].length; j++) {
                  System.out.println("expected tokens : "+ e.expectedTokenSequences[i][j]);
                }
              }

            for(int i=0; i<e.tokenImage.length; i++) {
              System.out.println("token images : "  + i +  "  " + e.tokenImage[i]);
            } 
//            System.out.println("expected tokens : " + e.expectedTokenSequences);
            
			
			e.printStackTrace();
			return;
		} catch (Exception e) {
			System.out.println("Encountered other exception " + e + " during parse.");
			e.printStackTrace();
			return;
		}
	}
	
	public static void parseFiles(String fileFullpath){
		IPath path = new Path(fileFullpath);
	  	IFolder folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
	  	
	  	if(folder.getType() != IResource.FOLDER) {
		  	System.out.println(fileFullpath + " is not folder " );
		  	return;
	  	}

		IResource[] resources = null;
		try {
				resources = folder.members();
			} catch (CoreException e) {
				e.printStackTrace();
			}
		
		if(resources == null)
			return;
				
		for (IResource resource : resources) {
			if(resource.getType() == IResource.FOLDER){
				JAMParser.parseFiles(fileFullpath + "/" + resource.getName());
			}
			else
				JAMParser.parseFile((IFile)resource);
		}
	}

	
//	public static void parseFiles(String fileFullpath){
//	  	
//		IPath path = new Path(fileFullpath);
//	  	IFolder folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
//	  	
//	  	if(folder.getType() != IResource.FOLDER) {
//		  	System.out.println(fileFullpath + " is not folder " );
//		  	return;
//	  	}
//
//		IResource[] resources = null;
//		try {
//				resources = folder.members();
//			} catch (CoreException e) {
//				e.printStackTrace();
//			}
//		
//		if(resources == null)
//			return;
//				
//		for (IResource resource : resources) {
//			if(resource.getType() == IResource.FOLDER){
//				JAMParser.parseFiles(fileFullpath + "/" + resource.getName());
//			}
//			else
//				JAMParser.parseFile((IFile)resource);
//		}
//	}

//	public static void parseString(String fileName, String buf) {
//		JAMParser parser;
////		System.out.println("JAM editor Parser Version 0.0: ");
//		parser = new JAMParser(new ByteArrayInputStream(buf.getBytes()));
//
//		try {
//			parser.parseJAM(fileName);
//			System.out.println("JAM parseString successful.");
//			return;
//		} catch (ParseException e) {
//			System.out.println("Encountered parse exception " + e + " during parse.");
//			e.printStackTrace();
//			return;
//		} catch (Exception e) {
//			System.out.println("Encountered other exception " + e +  " during parse.");
//			return;
//		}
//	}

	/**
	 * Secondary JAM interface used to internalize agent constructs
	 * from strings during execution.
	 */
//	public static void parseString(Interpreter interpreter, String buf) {
//		JAMParser parser;
//		System.out.println("JAM Parser Version 0.70: ");
//		parser = new JAMParser(new ByteArrayInputStream(buf.getBytes()));
//
//		try {
//			interpreter = (Interpreter) parser.ParseJamAgentDefinition(interpreter);
//			System.out.println("JAM string parse successful.");
//			return interpreter;
//		} catch (ParseException e) {
//			System.out.println("Encountered parse exception " + e + " during parse.");
//			e.printStackTrace();
//			return null;
//		} catch (Exception e) {
//			System.out.println("Encountered other exception " + e + " during parse.");
//			e.printStackTrace();
//			return null;
//		}
//	}



	
  }PARSER_END(JAMParser)

/* WHITE SPACE */

SPECIAL_TOKEN : {
	<WS: ([" ", "\t", "\n", "\r", "\f"])+ >
}
/* COMMENTS */

MORE : {
	"//" :			 IN_SINGLE_LINE_COMMENT
|	<"/**" ~["/"]>	{ input_stream.backup(1); } : IN_FORMAL_COMMENT
|	"/*" :			 IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : {
	<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN : {
	<FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE : {
	< ~[] >
}

SKIP: {
	 "\"" : IN_STRING
}
 
<IN_STRING>
TOKEN : {
	< STRING : "\"" > 
	{
		image.setLength(image.length() - 1);
		matchedToken.image = image.toString();
	} : DEFAULT 
}
 
<IN_STRING>
MORE :
{
	"\\\""	{ image.setLength(image.length() - 2); image.append("\""); }
|	"\\t"	{ image.setLength(image.length() - 2); image.append("\t"); }
|	"\\n"	{ image.setLength(image.length() - 2); image.append("\n"); }
|	"\\r"	{ image.setLength(image.length() - 2); image.append("\r"); }
|	"\\f"	{ image.setLength(image.length() - 2); image.append("\f"); }
|	< ~[] >	// Note that here you don't need any action.
}

TOKEN : {
	< #ws:		( [" ","\t","\n","\r"] )+ >
|	< #delim:	[" ","\t","\n","\r"] >
|	< #letter:	( ["-","_","A"-"Z","a"-"z"] ) >
|	< #digit:	["0"-"9"] >
|	< #charac:	( "'" ~["'","\n"] "'") | ( "''''" ) >
|	< #EXP:		["e","E"] ( ["+","-"] )? ( <digit> )+ >
|	< #SIGN :	["-","+"] >
|	< #number0:	( <SIGN> )? ( <digit> )+ >
|	< #number1:	( <SIGN> )? ( <digit> )+ "." ( <digit> )* ( <EXP> )?	>
|	< #number2:	( <SIGN> )? "." ( <digit> )+ ( <EXP> )?	 >
|	< #hexa0:	"0x" ( ["0"-"9","a"-"f"] )+ >
}

TOKEN [IGNORE_CASE] : {
	< IMPORT_DECL:			"import" >
|	< GOAL_DECL:			"GOALS" ( <delim> )* ":" >
|	< FACT_DECL:			"FACTS" ( <delim> )* ":" >
|	< OBSERVER_DECL:		"OBSERVER" ( <delim> )* ":" >
|   < PREFIX_DECL:			"PREFIXES" ( <delim> )* ":" >
|   < PREFIX:				"PREFIX" >

//|	< PLAN_START:			"Plan" ( <delim> )* ":" >
|	< PLAN_START:			"plan" >

|	< PLAN_NAME:			"NAME" ( <delim> )* ":" >
|	< PLAN_ID:				"ID" ( <delim> )* ":" >
|	< PLAN_DOC:				"DOCUMENTATION" ( <delim> )* ":" >
|	< PLAN_GOALSPEC:		"GOAL" ( <delim> )* ":" >
//|	< PLAN_CONCLUDESPEC:	"CONCLUDE" ( <delim> )* ":" >
|	< PLAN_CONCLUDESPEC:	"CONCLUDE" >
|	< PLAN_CONTEXT:			"CONTEXT" ( <delim> )* ":" >
|	< PLAN_PRECONDITION:	"PRECONDITION" ( <delim> )* ":" >
|	< PLAN_UTILITY:			"UTILITY" ( <delim> )* ":" >
|	< PLAN_EFFECTS:			"EFFECTS" ( <delim> )* ":"	>
|	< PLAN_FAILURE:			"FAILURE" ( <delim> )* ":" >
|	< PLAN_ATTRIBUTES:		"ATTRIBUTES" ( <delim> )* ":" >
|	< PLAN_BODY:			"BODY" ( <delim> )* ":" >
}

TOKEN [IGNORE_CASE] : {
	< PLAN_BODY_AND:		"AND" >
|	< PLAN_BODY_OR:			"OR" >
|	< PLAN_BODY_PARALLEL:	"PARALLEL" >
|	< PLAN_BODY_DO_ALL:		"DO_ALL" >
|	< PLAN_BODY_DO_ANY:		"DO_ANY" >
|	< PLAN_BODY_DO:			"DO" >
|	< PLAN_BODY_WHILE:		"WHILE" >
|	< PLAN_BODY_WHEN:		"WHEN" >
|	< PLAN_BODY_ATOMIC:		"ATOMIC" >
|	< PLAN_BODY_WAIT:		"WAIT" >
|	< IF:					"IF" >
|	< ELSE:					"ELSE" >
| 	< FOR:					"FOR" >
|	< KEYWORD_UTILITY:		":UTILITY" >
|	< KEYWORD_BY:			":BY" >
|	< KEYWORD_NOT_BY:		":NOT-BY" >
|	< EXECUTE:				"EXECUTE" >
|	< LOAD_PACKAGE:			"LOAD_PACKAGE" >
|	< LOAD_FROM_URL:		"LOAD_FROM_URL" >
|	< PARSE:				"PARSE" >
|	< FACT:					"FACT" >
|	< RETRIEVE:				"RETRIEVE" >
|	< IS_TRUE:				"IS_TRUE" >
|	< POST:					"POST" >
|	< UNPOST:				"UNPOST" >
|	< ACHIEVE:				"ACHIEVE" >
|	< PERFORM:				"PERFORM" >
|	< MAINTAIN:				"MAINTAIN" >
|	< QUERY:				"QUERY" >
|	< ASSERT:				"ASSERT" >
|	< FAIL:					"FAIL" >
|	< RETRACT:				"RETRACT" >
|	< UPDATE:				"UPDATE" >
|	< TRY:					"TRY" >
|	< CATCH:				"CATCH" >
|	< THROW:				"THROW" >
|	< NEW:					"NEW" >
}

TOKEN : {

 	< LPAREN: 				"(" >
| 	< RPAREN: 				")" >
| 	< LBRACE: 				"{" >
| 	< RBRACE: 				"}" >
| 	< LBRACKET: 			"[" >
| 	< RBRACKET: 			"]" >

| 	< ASSIGN: 				"=" >
| 	< GT: 					">" >
| 	< LT: 					"<" >
| 	< BANG: 				"!" >
| 	< EQ: 					"==" >
| 	< LE: 					"<=" >
| 	< GE: 					">=" >
| 	< NE: 					"!=" >	
| 	< SC_OR: 				"||" >
| 	< SC_AND: 				"&&" >
| 	< INCR: 				"++" >
| 	< DECR: 				"--" >
| 	< PLUS: 				"+" >
| 	< MINUS: 				"-" >
| 	< STAR: 				"*" >
| 	< SLASH: 				"/" >

|	< INTEGER:				<number0> >
|	< FLOAT:				( <number1> | <number2> )+ >
|	< ADDRESS:				<hexa0> >
|	< VARIABLE:				"$" ( <letter> | <digit> )* >
| 	< IDENTIFIER: 			["_","A"-"Z","a"-"z"] ( <letter> | <digit> )* >
| 	< CLASS_IDENTIFIER: 	<IDENTIFIER> ( "." <IDENTIFIER> )+ >
|  	< PROTOCOLTYPE:			("http://"|"tcp://"|"https://")+ >
| 	< SLASH_END_IDENTIFIER: ( <letter> | <digit> )+ ((["."] (<letter>|<digit>)+ )* ["/"])+ >
| 	< HASH_END_IDENTIFIER: ( <letter> | <digit> )+ ((["."] (<letter>|<digit>)+ )* ["/"])* ((<letter>|<digit>)+ ["#"])+ >
|   < OWL_NAMESPACE_IDENTIFIER:		(<CLASS_IDENTIFIER> ["/"] | <CLASS_IDENTIFIER> ["#"] )+ >
}




//Object ParseJamAgentDefinition(EditorModel editorModel) :
//{
//	if (editorModel == null) editorModel = new EditorModel();
//}
//{
//	( import_statement() )* agent_components(editorModel) 
//	{
//		return editorModel;
//	}
//}



void parseJAM(String fileName):
{
  EditorModel editorModel = EditorModel.getInstance();
}
{
  (import_statement()) * agent_components(editorModel, fileName)
}

void import_statement() :
{
	Token t = null;
	boolean isPackage = false;
}
{
	<IMPORT_DECL> ( t = <CLASS_IDENTIFIER> | t = <IDENTIFIER> ) [ "." "*" { isPackage = true; } ] ";"
	{
//		if (isPackage) {
//			_loader.importPackage(t.image);
//		} else {
//			_loader.importClass(t.image);
//		}
	}
}

/**********************************************************************/
/**                                                                  **/
/**	Agent Components                                                 **/
/**                                                                  **/
/**********************************************************************/

void agent_components(EditorModel editorModel, String fileName) :
{
	Plan plan = null;
}
{
	// Allow arbitrary interleaving of Goals, Plans, Facts, and Observer
	(
		<GOAL_DECL>		( goal(editorModel, fileName) )*
	|	<FACT_DECL>		( fact(editorModel, fileName) )*
	|   <PREFIX_DECL>	( prefix(editorModel, fileName) )* 
//	|	<PLAN_START>	( plan(editorModel) )*
	|	<OBSERVER_DECL> ( observer(editorModel, fileName) )*
//	 	(
//	 		{
//		 		Plan currentPlan = new Plan();
//		 		PlanSequenceConstruct body_elements = null;
//	 		}
//			"{" body_elements = plan_construct_sequence(currentPlan.getSymbolTable(), editorModel) "}"
//			{
//				currentPlan.setBody(body_elements);
//				editorModel.setObserver(currentPlan);
//			}
//		)*
//	|	<CATCH> globalCatch(editorModel)
	| 	plan = plan(editorModel, fileName) { editorModel.getPlanManager().add(plan); }
	)+
}

void observer(EditorModel editorModel, String fileName):
{
  Plan currentPlan = new Plan();
}
{
	"{" plan_construct_sequence(currentPlan.getSymbolTable(), editorModel, fileName) "}"
}

void prefix(EditorModel editorModel, String fileName) :
{
	Prefix prefix = null;
	Token protocol_type = null;
	Token name = null;
	String name_space = null;
}
{
	  prefix = prefix_owl(null, editorModel, fileName) "<" protocol_type = <PROTOCOLTYPE>  name = namespace() ">" ";"
	{
	  	name_space = new String(protocol_type.image + name.image);
	  	prefix.setValue(name_space);
		editorModel.getPrefixManager().add(prefix);
	}
}

//void auto_prefix(EditorModel editorModel) :
//{
//	Prefix auto_prefix = null;
//}
//{
//	auto_prefix = prefix_owl(null,editorModel) ";"
//	{
//
//	}
//}

Prefix prefix_owl(SymbolTable symbol_table, EditorModel editorModel, String fileName) :
{
  Token id;
  Token traceToken;
}
{
	traceToken = <PREFIX> id = <IDENTIFIER> ":"
	{
	  return new Prefix(id.image, fileName, traceToken.beginLine);
	}
}


	
/**********************************************************************/
/**                                                                  **/
/**	GOAL                                                             **/
/**                                                                  **/
/**********************************************************************/
	
void goal(EditorModel editorModel, String fileName) :
{
	GoalAction goal = null;
}
{
	goal=goal_action(null, editorModel, fileName) ";"
	{

	}
}

/**********************************************************************/
/**                                                                  **/
/**	FACT                                                             **/
/**                                                                  **/
/**********************************************************************/
	
void fact(EditorModel editorModel, String fileName) :
{
	Relation relation = null;
	Token trace;
}
{
	trace = <FACT> relation=relation(null, editorModel, fileName) ";"
	{
		relation.set_fileName(fileName);
		relation.set_line(trace.beginLine);
		editorModel.getRelationManager().add(relation);
	}
}

///**********************************************************************/
///**                                                                  **/
///**	Global Catch                                                     **/
///**                                                                  **/
///**********************************************************************/
//	
//void globalCatch(EditorModel editorModel) :
//{
//	Token en = null;;
//	Variable variable = null;
//	SymbolTable symbolTable = new SymbolTable();
//	PlanConstruct catchConstruct = null;
//	Plan currentPlan = new Plan();
//}
//{
//	"(" variable = variable(symbolTable) ":" en = <CLASS_IDENTIFIER> ")" 
//	catchConstruct=plan_construct_sequence_block(symbolTable, editorModel)
//	{
//		ExceptionManager em = editorModel.getExceptionManager();
//		em.addGlobalCatch(new GlobalCatch(new String(en.image), variable, catchConstruct));
//	}
//}

/**********************************************************************/
/**                                                                  **/
/**	PLAN                                                             **/
/**                                                                  **/
/**********************************************************************/

Plan plan(EditorModel editorModel, String fileName) :
{
	Plan plan = new Plan();
	Relation relation = null;
	GoalAction goalAction = null;
	Token traceToken = null;
}
{
//	<PLAN_START> ( ( <PLAN_CONCLUDESPEC> relation = relation(plan.getSymbolTable(), editorModel) ) | goalAction = goal_action(plan.getSymbolTable(), editorModel) )
	traceToken = <PLAN_START> (goalAction = goal_action(plan.getSymbolTable(), editorModel, fileName)) 
	"{"
		plan_components(plan, editorModel, fileName)	
	"}"
	{
//	    System.out.println("Token  trace : " + traceToken.beginLine + "   " + traceToken.endLine);
		Relation rel = goalAction.getRelation();
		if(rel != null) {
		  rel.set_fileName(fileName);
		  rel.set_line(traceToken.beginLine);
		}
		

		int actType = goalAction.getActType();
		if(actType == Action.ACT_CONCLUDE || actType == Action.ACT_ACHIEVE || actType == Action.ACT_MAINTAIN) {
			editorModel.getRelationManager().add(rel);
		}
		
		plan.setGoalAction(goalAction);
		plan.set_fileName(fileName);
		plan.set_line(traceToken.beginLine);
		return plan; 
	}
}

/*	
void plan(EditorModel editorModel) :
{}
{ 
	{
		Plan currentPlan = new Plan();
	}
	"{" plan_components(currentPlan, editorModel) "}"
	{
		editorModel.getPlanLibrary().add(currentPlan);
	}
} 
*/
	
void plan_components(Plan currentPlan, EditorModel editorModel, String fileName) :
{}
{ 
	plan_component(currentPlan, editorModel, fileName) ( plan_component(currentPlan, editorModel, fileName) )*
} 
	
void plan_component(Plan currentPlan, EditorModel editorModel, String fileName) :
{}
{ 
	plan_id(currentPlan, editorModel, fileName)
| 	plan_name(currentPlan, editorModel, fileName)
|	plan_doc(currentPlan)
//|	plan_goalspec(currentPlan, editorModel)
//|	plan_concludespec(currentPlan, editorModel)
|	plan_context(currentPlan, editorModel, fileName)
|	plan_precondition(currentPlan, editorModel, fileName)
|	plan_utility(currentPlan, editorModel)
//|	plan_effects(currentPlan, editorModel)
|	plan_failure(currentPlan, editorModel, fileName)
//|	plan_attributes(currentPlan)
|	plan_body(currentPlan, editorModel, fileName)
} 
	
	
/**********************************************************************/
/** ID                                                             **/
/** Name                                                             **/
/** Doc                                                              **/
/** Attributes                                                       **/
/**********************************************************************/
void plan_id(Plan currentPlan, EditorModel editorModel, String fileName) : 
{
  	Prefix prefix = null;
  	NameSpace ns = null;
	Token t_s = null;
}
{ 
	<PLAN_ID> (prefix = prefix_owl(null,editorModel, fileName))* [ t_s=<STRING> ]
		{
			if (t_s != null&&prefix==null) { 
				currentPlan.setId(t_s.image);
			}else if(prefix!=null&&t_s!=null) {// prefix.getPrefix should be changed as prefix by changing method to get name space with prefix
				currentPlan.setId(editorModel.getPrefixManager().getValue(prefix.getPrefix()) + t_s.image);
			}
		}
} 
void plan_name(Plan currentPlan, EditorModel editorModel, String fileName) :  ///// @mod
{
  	Prefix prefix = null;
  	NameSpace ns = null;
	Token t_s = null;
}
{ 
	<PLAN_NAME> (prefix = prefix_owl(null,editorModel, fileName))* [ t_s=<STRING>  ";"]
		{
			if (t_s != null&&prefix==null) { 
				currentPlan.setName(t_s.image);
			}else if(prefix!=null&&t_s!=null) {// prefix.getPrefix should be changed as prefix by changing method to get name space with prefix 
			  	currentPlan.setName(editorModel.getPrefixManager().getValue(prefix.getPrefix()) + t_s.image); 
			}
		}
} 
	
	
void plan_doc(Plan currentPlan) :
{
	Token t_s = null;
}
{ 
	<PLAN_DOC> [ t_s=<STRING> ]
		{
			if (t_s != null)
				currentPlan.setDocumentation(t_s.image);
		}
}
	
	
//void plan_attributes(Plan currentPlan) :
//{
//	Token t_s = null;
//}
//{ 
//	<PLAN_ATTRIBUTES> [ t_s=<STRING> ]
//		{
//			if (t_s != null)
//			currentPlan.setAttributes(t_s.image);
//		}
//}
	
	
/**********************/
/* Goal Specification */
/**********************/
	
//void plan_goalspec(Plan currentPlan, EditorModel editorModel) :
//{
//	Relation rel = null;
//	Action ga = null;
//}
//{ 
// <PLAN_GOALSPEC> [ ga=goal_action(currentPlan.getSymbolTable(), editorModel) ";" ]
//	 {
//		 if (ga != null) {
//			 currentPlan.setGoalSpecification(ga);
//			 currentPlan.setConcludeSpecification(rel);
//		 }
//	 }
//} 
	
	
/*******************************/
/* Plan Conclude Specification */
/*******************************/
	
//void plan_concludespec(Plan currentPlan, EditorModel editorModel) :
//{
//	Action ga = null;
//	Relation rel = null;
//}
//{ 
// <PLAN_CONCLUDESPEC> [ rel=relation(currentPlan.getSymbolTable(), editorModel) ";" ]
//	 {
//		 if (rel != null) {
//			 currentPlan.setConcludeSpecification(rel);
//			 currentPlan.setGoalSpecification(ga);
//		 }
//	 }
//} 
	
	
/***********/
/* Context */
/***********/
	
void plan_context(Plan currentPlan, EditorModel editorModel, String fileName) :
{
	List<Condition> c = null;
}
{ 
 <PLAN_CONTEXT> [ c=condition_list(currentPlan.getSymbolTable(), editorModel, fileName) ]
	 {
	   if(c!=null) {
		List<Relation> relations = new LinkedList<Relation>();
	     for(Condition condition : c) {
	     	relations.add(((RelationCondition)condition).getRelation());
	     }	     
	 	currentPlan.setContext(relations);
	   }
	 }
} 
	
	
/***********/
/* Precondition */
/***********/
	
void plan_precondition(Plan currentPlan, EditorModel editorModel, String fileName) :
{
	List<Condition> c = null;
}
{ 
 <PLAN_PRECONDITION> [ c=condition_list(currentPlan.getSymbolTable(), editorModel, fileName) ]
	 {
		 if(c!=null) {
		List<Relation> relations = new LinkedList<Relation>();
	     for(Condition condition : c) {
	     	relations.add(((RelationCondition)condition).getRelation());
	     }	     
	 	currentPlan.setPrecondition(relations);
	   }
	 }
} 
	
	
/************/
/* Utility */
/************/

void plan_utility(Plan currentPlan, EditorModel editorModel) :
{
	Expression e = null;
}
{ 
	<PLAN_UTILITY> [ e=expression(currentPlan.getSymbolTable(), editorModel) ";" ]
		{
//			if (e != null)
//				currentPlan.setUtility(e);
		}
} 

	
/*********************/
/* Effects / Failure	*/
/*********************/


//void plan_effects(Plan currentPlan, EditorModel editorModel) :
//{
//	PlanSequenceConstruct body_elements = null;
//	PlanAtomicConstruct atomic_element = null;
//}
//{ 
//	<PLAN_EFFECTS> [ body_elements=plan_construct_sequence(currentPlan.getSymbolTable(), editorModel) ]
//		{
//			if (body_elements != null)
//	{
//		atomic_element = new PlanAtomicConstruct(body_elements);
//		currentPlan.setEffects(atomic_element);
//	}
//		}
//}
//
//
void plan_failure(Plan currentPlan, EditorModel editorModel, String fileName) :
{
	List<GoalAction> body_elements = null;
//	PlanAtomicConstruct atomic_element = null;
}
{ 
	<PLAN_FAILURE> [ body_elements=plan_construct_sequence(currentPlan.getSymbolTable(), editorModel, fileName) ]
		{
//			if (body_elements != null)
//			{
//				atomic_element = new PlanAtomicConstruct(body_elements);
//				currentPlan.setFailure(atomic_element);
//			}
		}
} 


/***********/
/* Body		 */
/***********/

void plan_body(Plan currentPlan, EditorModel editorModel, String fileName) :
{
	List<GoalAction> body_elements = null;
}
{
	<PLAN_BODY> [ body_elements=plan_construct_sequence(currentPlan.getSymbolTable(), editorModel, fileName) ]
	{
		if (body_elements != null) currentPlan.setBody(body_elements);
	}
}

List<GoalAction> plan_construct_sequence(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	List<GoalAction> body = new LinkedList<GoalAction>();
	Action action;
}
{
	action=plan_construct(symbolTable, editorModel, fileName)
{
	if(action!=null)
	  	body.add((GoalAction)action);
}
(
	action=plan_construct(symbolTable, editorModel, fileName)
{
   	if(action!=null)
	  	body.add((GoalAction)action);
}
)*
{
	return body;
}
}


Action plan_construct(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Action goalAction = null;
}
{
	(
		goalAction = plan_construct_execute_action(symbolTable, editorModel, fileName)
		| plan_construct_sequence_block(symbolTable, editorModel, fileName)
		| plan_construct_and(symbolTable, editorModel, fileName)
		| plan_construct_or(symbolTable, editorModel, fileName) 
		| plan_construct_parallel(symbolTable, editorModel, fileName)
		| plan_construct_do(symbolTable, editorModel, fileName) 
	 	| plan_construct_do_all(symbolTable, editorModel, fileName) 
		| plan_construct_do_any(symbolTable, editorModel, fileName) 
		| plan_construct_wait(symbolTable, editorModel, fileName)
		| plan_construct_if_then_else(symbolTable, editorModel, fileName)
		| plan_construct_when(symbolTable, editorModel, fileName) 
		| plan_construct_while(symbolTable, editorModel, fileName)
		| plan_construct_for(symbolTable, editorModel, fileName)
		| plan_construct_atomic(symbolTable, editorModel, fileName) 
		| plan_construct_try_catch(symbolTable, editorModel, fileName) 
	)
	{
		return goalAction;
	}
}

Action plan_construct_execute_action(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Action a;
}
{
	a=action(symbolTable, editorModel, fileName) ";"		
	{
		return a;
	}
}

PlanSequenceConstruct plan_construct_sequence_block(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	PlanSequenceConstruct s = null;
}
{
//	"{" s=plan_construct_sequence(symbolTable, editorModel) "}"
	"{" plan_construct_sequence(symbolTable, editorModel, fileName) "}"
	{
		return s;
	}
}



PlanConstruct plan_construct_and(SymbolTable symbolTable, EditorModel editorModel, String fileName) : 
{
//	PlanBranchConstruct construct;
	PlanSequenceConstruct s = null;
}
{
	<PLAN_BODY_AND>
	{
//	   construct = new PlanBranchConstruct(null, PlanBranchConstruct.PLAN_AND_BRANCH);
	}
	s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//	{ construct.addBranch(s); }
	(
		s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//		{ construct.addBranch(s); }
	)*
	";"
	{
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_or(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanBranchConstruct construct;
	PlanSequenceConstruct s = null;
}
{
	<PLAN_BODY_OR>
	{
//	  construct = new PlanBranchConstruct(null, PlanBranchConstruct.PLAN_OR_BRANCH);
	}
	s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//	{ construct.addBranch(s); }
	( 
		s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//		{ construct.addBranch(s); }
	)*
 	";"
	{
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_parallel(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanParallelConstruct construct;
	PlanSequenceConstruct s = null;
}
{
 	<PLAN_BODY_PARALLEL>
 	{
// 	  construct = new PlanParallelConstruct();
	}
	s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//	{ construct.insertConstruct(s); }
	( 
		s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//		{ construct.insertConstruct(s); }
	)*
 	";"
	{
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_do(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanDoConstruct construct;
	PlanSequenceConstruct s = null;
	Action a;
}
{
	<PLAN_BODY_DO> s=plan_construct_sequence_block(symbolTable, editorModel, fileName) <PLAN_BODY_WHILE> ":" a=action(symbolTable, editorModel, fileName) ";"
	{
//		construct = new PlanDoConstruct(a, s);
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_do_all(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanDoAllConstruct construct;
	PlanSequenceConstruct s = null;
}
{
	<PLAN_BODY_DO_ALL>
	{
//	  construct = new PlanDoAllConstruct();
	}
	s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//	{ construct.addBranch(s); }
	(
		s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//		{ construct.addBranch(s); }
	)*
	";"
	{
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_do_any(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanDoAnyConstruct construct;
	PlanSequenceConstruct s = null;
}
{
	<PLAN_BODY_DO_ANY>
//	{ construct = new PlanDoAnyConstruct(); }
	s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//	{ construct.addBranch(s); }
	(
		s=plan_construct_sequence_block(symbolTable, editorModel, fileName)
//		{ construct.addBranch(s); }
	)*
	";"
	{
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_wait(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanConstruct c = null;
	Action a = null;
	Relation rel = null;
}
{
	<PLAN_BODY_WAIT>
	(
		":" a=action(symbolTable, editorModel, fileName) ";"
//		{ c = new PlanWaitConstruct(a); }
		| rel=relation(symbolTable, editorModel, fileName) ";"
//		{ c = new PlanWaitConstruct(rel); }
	)
	{
//		return c;
		return null;
	}
}

PlanConstruct plan_construct_when(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanWhenConstruct construct;
	PlanSequenceConstruct s = null;
	Action a;
}
{
	<PLAN_BODY_WHEN> ":" a=action(symbolTable, editorModel, fileName) s=plan_construct_sequence_block(symbolTable, editorModel, fileName) ";"
	{
//		construct = new PlanWhenConstruct(a, s);
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_if_then_else(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Expression e;
	PlanConstruct s = null;
	PlanConstruct s2 = null;
}
{
//	<IF> "(" e=expression(symbolTable, editorModel) ")" s=plan_construct(symbolTable, editorModel)
	<IF> "(" e=expression(symbolTable, editorModel) ")" plan_construct(symbolTable, editorModel, fileName) 
	[
//		LOOKAHEAD(1) <ELSE> s2=plan_construct(symbolTable, editorModel)
		LOOKAHEAD(1) <ELSE> plan_construct(symbolTable, editorModel, fileName)
	]
	{ 
//		return new PlanWhenConstruct(new TestAction(e), s, s2);
		return null;
	}
}

PlanConstruct plan_construct_while(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanWhileConstruct construct;
	PlanSequenceConstruct s = null;
	Action a;
}
{
	<PLAN_BODY_WHILE> ":" a=action(symbolTable, editorModel, fileName) s=plan_construct_sequence_block(symbolTable, editorModel, fileName) ";"
	{
//		construct = new PlanWhileConstruct(a, s);
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_for(SymbolTable symbolTable, EditorModel editorModel,String fileName) :
{
	Action s = null;
	Action i = null;
	Expression c = null;
	PlanConstruct b = null;
}
{
//	<FOR> "(" ( s = action(symbolTable, editorModel) )? ";" ( c = expression(symbolTable, editorModel) )? ";" ( i = action(symbolTable, editorModel) )? ")" b = plan_construct(symbolTable, editorModel)
	<FOR> "(" ( s = action(symbolTable, editorModel, fileName) )? ";" ( c = expression(symbolTable, editorModel) )? ";" ( i = action(symbolTable, editorModel, fileName) )? ")" plan_construct(symbolTable, editorModel, fileName)
	{
//		PlanSequenceConstruct forConstruct = new PlanSequenceConstruct();
//		forConstruct.insertConstruct(new PlanSimpleConstruct(s));
//		
//		PlanSequenceConstruct bodyConstruct = new PlanSequenceConstruct();
//		bodyConstruct.insertConstruct(b);
//		if (i != null) {
//			bodyConstruct.insertConstruct(new PlanSimpleConstruct(i));
//		}
//		if (c == null) {
//			c = Value.TRUE;
//		}
//		forConstruct.insertConstruct(new PlanWhileConstruct(new TestAction(c), bodyConstruct));
//		return forConstruct;
		return null;
	}
}

PlanConstruct plan_construct_atomic(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
//	PlanAtomicConstruct construct;
	PlanSequenceConstruct s = null;
}
{
	<PLAN_BODY_ATOMIC> s=plan_construct_sequence_block(symbolTable, editorModel, fileName) ";"
	{
//		construct = new PlanAtomicConstruct(s);
//		return construct;
		return null;
	}
}

PlanConstruct plan_construct_try_catch(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	PlanConstruct tryConstruct = null;
	Variable variable = null;
	String exceptionName = null;
	Token token = null;
	PlanConstruct catchConstruct = null;
//	List<PlanTryCatchEntry> list = new LinkedList<PlanTryCatchEntry>();
}
{
	<TRY> tryConstruct=plan_construct_sequence_block(symbolTable, editorModel, fileName)
	(
		<CATCH> "(" variable=variable(symbolTable) ":" token=<CLASS_IDENTIFIER> ")"
		catchConstruct=plan_construct_sequence_block(symbolTable, editorModel, fileName)
		{
//			list.add(new PlanTryCatchEntry(new String(token.image), variable, catchConstruct));
		}
	)+
	";"
	{
//		return new PlanTryCatchConstruct(tryConstruct, list.toArray(PlanTryCatchEntry.NULL_ARRAY));
		return null;	
	}
}

/**********************************************************************/
/*											*/
/*	Condition									*/
/*											*/
/**********************************************************************/

List<Condition> condition_list(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	List<Condition> cl = new LinkedList<Condition>();
	Condition c = null;
}
{
	c=condition(symbolTable, editorModel, fileName)
		{
		  if(c!=null)
			cl.add(c);
		}
	( c=condition(symbolTable, editorModel, fileName)
		{
		  if(c!=null)
			cl.add(c);
		}
	)*
		{
			return cl;
		}
}

Condition condition(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Expression e;
	Relation relation;
}
{
	e=expression(symbolTable, editorModel) ";"
		{
		  return null;
//			return new ExpressionCondition(e);
		}
| <FACT> relation = relation(symbolTable, editorModel, fileName) ";"
		{
			return new FactCondition(relation, editorModel);
		}
| <RETRIEVE> relation = relation(symbolTable, editorModel, fileName) ";"
		{
			return new RetrieveCondition(relation, editorModel);
		}
}


/**********************************************************************/
/*											*/
/*	Action										*/
/*											*/
/**********************************************************************/

Action action(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Action a = null;
}
{
	(
		action_expression(symbolTable, editorModel)
		| action_test(symbolTable, editorModel)
		| action_execute(symbolTable, editorModel)
		| action_fail()
		| action_load_package(symbolTable, editorModel)
		| action_load_from_url(symbolTable, editorModel)
		| action_parse(symbolTable, editorModel)
		| action_fact(symbolTable, editorModel, fileName)
		| action_retrieve(symbolTable, editorModel, fileName)
		| action_assert(symbolTable, editorModel, fileName)
		| action_retract(symbolTable, editorModel, fileName)
		| action_update(symbolTable, editorModel, fileName)
		| action_post(symbolTable, editorModel, fileName)
		| action_unpost(symbolTable, editorModel, fileName)
		| a=goal_action(symbolTable, editorModel, fileName)
		| throw_action(symbolTable, editorModel, fileName)
	)
	{
		return a;
	}
}

Action action_expression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression expr1 = null;
	Expression expr2 = null;
	Action a = null;
}
{
	expr1 = variable(symbolTable) ( <ASSIGN> expr2=expression(symbolTable, editorModel) | ( expr1 = obj_operation(expr1, symbolTable, editorModel) )+ )
	{ 
		if (expr2 != null) {
		  	return null;
//			return new AssignAction(expr1, expr2);
		} else {
		  	return null;
//			return new ObjectInvokeAction(expr1);
		}
	}
	| expr1 = cls_operation(symbolTable, editorModel) ( expr1 = obj_operation(expr1, symbolTable, editorModel) )*
	{
	  	return null;
//		return new ObjectInvokeAction(expr1);
	}
}

/*
Action action_assign(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression v;
	Expression e;
}
{
	v=variable(symbolTable) <ASSIGN> e=expression(symbolTable, editorModel)
	{
		return new AssignAction(v, e);
	}
}
*/

Action action_execute(SymbolTable symbolTable, EditorModel editorModel) :
{
	Token cls = null;
	Token fn = null;
	Variable v = null;
	List<Expression> el = null;
}
{
	<EXECUTE> ( cls=<CLASS_IDENTIFIER> | "`" fn=<IDENTIFIER> ) ("[" v=variable(symbolTable) "]")? el=object_arguments(symbolTable, editorModel)
	{
		if (cls != null || v != null) {

			// Break down the class identifier into the class path and the function.
			String fullIdentifier = null;
			if (cls != null) {
				fullIdentifier = new String(cls.image);
			} else {
				fullIdentifier = new String(fn.image);
			}

			//	System.out.println("fullIdentifier = " + fullIdentifier);
			int lastDotIndex = fullIdentifier.lastIndexOf(".");
			//	System.out.println("lastDotIndex = " + lastDotIndex);
			String funcName = fullIdentifier.substring(lastDotIndex+1);
			//	System.out.println("funcName = " + funcName);

			String className = null;
			if (lastDotIndex != -1) {
				className = fullIdentifier.substring(0, lastDotIndex);
			} else {
				className = new String("");
			}

			//	System.out.println("className = " + className);
			//	System.out.println("arg list = " + el + ", #args = " + el.getCount());

			if (v != null) {
			  return null;
//				return new ObjectAction(className, funcName, v, el);
			} else {
			  return null;
//				return new ObjectAction(className, funcName, el);
			}
		} else {
		  	return null;
//			return new SimpleAction(editorModel, fn.image, el);
		}
	}
}

Action action_load_package(SymbolTable symbolTable, EditorModel editorModel) :
{
	List<Expression> el = null;
}
{
	<LOAD_PACKAGE> el=object_arguments(symbolTable, editorModel)
	{
	  return null;
//		return new LoadPackageAction(el, editorModel);
	}
}

Action action_load_from_url(SymbolTable symbolTable, EditorModel editorModel) :
{
	List<Expression> el = null;
}
{
	<LOAD_FROM_URL> el=object_arguments(symbolTable, editorModel)
	{
	  return null;
//		return new LoadFromURLAction(el, editorModel);
	}
}

Action action_parse(SymbolTable symbolTable, EditorModel editorModel) :
{
	List<Expression> el = null;
	
}
{
	<PARSE> el=object_arguments(symbolTable, editorModel)
	{
	  return null;
//		return new ParseAction(el);
	}
}

Action action_retrieve(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation r;
}
{
	<RETRIEVE> r=relation(symbolTable, editorModel, fileName)
	{
		return new RetrieveAction(r.getName(), r);
	}
}

Action action_test(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression e;
}
{
	<IS_TRUE> e=expression(symbolTable, editorModel)
	{
//		return new TestAction(e);
		return null;
	}
}

Action action_assert(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation r;
	Token trace;
}
{
	trace = <ASSERT> r=relation(symbolTable, editorModel, fileName)
	{
	  r.set_fileName(fileName);
	  r.set_line(trace.beginLine);
	  editorModel.getRelationManager().add(r);
		return new AssertAction(r.getName(), r);
	}
}

Action action_retract(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation r;
}
{
	<RETRACT> r=relation(symbolTable, editorModel, fileName)
	{
		return new RetractAction(r.getName(), r);
	}
}

Action action_update(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation oldRel;
	Relation newRel;
}
{
	<UPDATE> "(" oldRel=relation(symbolTable, editorModel, fileName) ")" "(" newRel=relation(symbolTable, editorModel, fileName) ")"
	{
		return new UpdateAction(oldRel.getName(), oldRel, newRel);
	}
}

Action action_fact(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation relation;
}
{
	<FACT> relation = relation(symbolTable, editorModel, fileName)
	{
		return new FactAction(relation.getName(), relation);
	}
}

Action action_fail() :
{
}
{
	<FAIL>
	{
	  return null;
//		return new FailAction();
	}
}

Action action_post(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	GoalAction ga;
}
{
	<POST> ga=goal_action(symbolTable, editorModel, fileName)
	{
	  return null;
//		return new PostAction(ga, editorModel);
	}
}

Action action_unpost(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	GoalAction ga;
}
{
	<UNPOST> ga=goal_action(symbolTable, editorModel, fileName)
	{
	  return null;
//		return new UnpostAction(ga, editorModel);
	}
}

//-------------------------------------------------------------------------------
// GOAL_ACTION
//-------------------------------------------------------------------------------

GoalAction goal_action(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Token kw;
	GoalAction gab;
	Expression e_utility = null;
	List<Expression> e_by = null;
	List<Expression> e_not_by = null;
}
{
	gab=goal_action_basic(symbolTable, editorModel, fileName) 
	[ <KEYWORD_UTILITY> e_utility=expression(symbolTable, editorModel) ]
	[ <KEYWORD_BY> e_by=object_arguments(symbolTable, editorModel) ]
	[ <KEYWORD_NOT_BY> e_not_by=object_arguments(symbolTable, editorModel) ]
	{
//		if (e_utility != null) {
//			gab.setUtility(e_utility);
//		}
//		if (e_by != null) {
//			gab.setBy(e_by);
//		}
//		if (e_not_by != null) {
//			gab.setNotBy(e_not_by);
//		}
		return gab;		
	}
}

GoalAction goal_action_basic(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	GoalAction a;
}
{
	(
		a=goal_action_basic_achieve(symbolTable, editorModel, fileName)
		| a=goal_action_basic_perform(symbolTable, editorModel, fileName)
		| a=goal_action_basic_maintain(symbolTable, editorModel, fileName)
		| a=goal_action_basic_query(symbolTable, editorModel, fileName)
		| a=goal_action_basic_conclude(symbolTable, editorModel, fileName)
	)
	{
		return a;
	}
}

GoalAction goal_action_basic_achieve(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation rel;
	Token trace;
}
{
	trace = <ACHIEVE> rel=relation(symbolTable, editorModel, fileName)
	{
		return new AchieveGoalAction(rel.getName(), rel);
	}
}

GoalAction goal_action_basic_perform(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation rel;
}
{
	<PERFORM> rel=relation(symbolTable, editorModel, fileName)
	{
		return new PerformGoalAction(rel.getName(), rel);
	}
}

GoalAction goal_action_basic_maintain(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation rel;
	Token trace;
}
{
	trace = <MAINTAIN> rel=relation(symbolTable, editorModel, fileName)
	{
		return new MaintainGoalAction(rel.getName(), rel);
	}
}

GoalAction goal_action_basic_conclude(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation rel;
	Token trace;
}
{
	trace = <PLAN_CONCLUDESPEC> rel=relation(symbolTable, editorModel, fileName)
	{
		return new ConcludeGoalAction(rel.getName(), rel);
	}
}


GoalAction goal_action_basic_query(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Relation rel;
	Token trace;
}
{
	trace = <QUERY> rel=relation(symbolTable, editorModel, fileName)
	{
	  	return null;
//		return new QueryGoalAction(rel.getName(), rel, null, editorModel);
	}
}

Action throw_action(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Expression expr = null;
	Token id = null;
	Expression[] args = Expression.NULL_ARRAY;
}
{
	/*
	<THROW> expr = expression(symbolTable, editorModel)
	{
		return new ThrowAction(expr);
	}
	*/

	<THROW> <NEW> id = <CLASS_IDENTIFIER> "(" args = _arguments(symbolTable, editorModel) ")"  
	{
		if (expr != null) {
//			return new ThrowAction(expr);
		} else {
//			return new ThrowAction(new String(id.image), args);
		}
		return null;
	}
}

Expression[] _arguments(SymbolTable symbolTable, EditorModel editorModel) :
{
	List<Expression> list = new LinkedList<Expression>();
	Expression e = null;
}
{
	[
	e=expression(symbolTable, editorModel)		{list.add(e);}
	( e=expression(symbolTable, editorModel)	{list.add(e);} )*
	]
	{return list.toArray(Expression.NULL_ARRAY);}
}



/**********************************************************************/
/*											*/
/*	Relation									*/
/*											*/
/**********************************************************************/

Relation relation(SymbolTable symbolTable, EditorModel editorModel, String fileName) :
{
	Token id = null;
	Token name_space = null;
	Prefix prefix = null;
	Token prefi = null;
	Token[] tokens;
	List<Expression> el = null;
	String relation_name = null;
}
{
  prefi = <IDENTIFIER> (":" id = <IDENTIFIER>)* [ el=object_arguments(symbolTable, editorModel) ]
		{
		  if(id!=null) {
//		    	relation_name = editorModel.getPrefixManager().getValue(prefi.image) + id.image;
				relation_name = prefi.image+ ":" + id.image;
		    	Relation relation = new Relation(relation_name, el);
	  			return relation;
	  		}else {
	  		  	id = prefi;
	  		  	Relation relation = new Relation(id.image, el);
				return relation;
			} 
		} 
	| tokens = owl() [ el=object_arguments(symbolTable, editorModel) ] 
		{
		  	id = tokens[1];
		  	name_space = tokens[0];
		  	Relation relation = new Relation(tokens[0].image + tokens[1].image + tokens[2].image, el);
			return relation;
		}
}


Token[] owl():
{
  	Token[] owl_token = {null,null,null};
  	Token protocol_type = null;
	Token id = null;
	Token name_space = null;
}
{
	"<" protocol_type = <PROTOCOLTYPE> name_space = namespace() (id = <CLASS_IDENTIFIER> | id = <IDENTIFIER>)+ ">"
	{
	  	owl_token[0] = protocol_type;
		owl_token[1] = name_space;
		owl_token[2] = id;
		return owl_token;
	}
}

Token namespace():
{
	Token name_space;
}
{
	name_space = <OWL_NAMESPACE_IDENTIFIER>
		{
		  return name_space;
		}
	| name_space = <SLASH_END_IDENTIFIER>
		{
		  return name_space;
		}
	| name_space = <HASH_END_IDENTIFIER>
		{
		  return name_space;
		}
}

/**********************************************************************/
/*																	*/
/*	Expression														*/
/*																	*/
/**********************************************************************/

List<Expression> object_arguments(SymbolTable symbolTable, EditorModel editorModel) :
{
	List<Expression> exprList = new LinkedList<Expression>();
	Expression e = null;
}
{
	"(" [
		e=expression(symbolTable, editorModel)
		{
			exprList.add(e);
		}
		(
			"," e=expression(symbolTable, editorModel)
			{
				exprList.add(e);
			}
		)*
	] ")"
	{
		return exprList;
	}
}

/*
List<Expression> explist(SymbolTable symbolTable, EditorModel editorModel) :
{
	List<Expression> el = new LinkedList<Expression>();
	Expression e = null;
}
{
	[
		e=expression(symbolTable, editorModel) 
		{
			el.add(e);
		}
		( e=expression(symbolTable, editorModel)
			{
				el.add(e);
			}
		)*
	]
	{
		return el;
	}
}
*/

Expression expression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression expr = null;
}
{
	expr = conditionalExpression(symbolTable, editorModel)
	{
		return expr;
	}
}

Expression conditionalExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression expr = null;
}
{
	expr = conditionalOrExpression(symbolTable, editorModel) 
	{
		return expr;
	}
}

Expression conditionalOrExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression lhExpr = null;
	Expression rhExpr = null;
}
{
	lhExpr = conditionalAndExpression(symbolTable, editorModel) 
	(
		"||" rhExpr = conditionalAndExpression(symbolTable, editorModel) 
		{
			List<Expression> exprList = new LinkedList<Expression>();
			exprList.add(lhExpr);
			exprList.add(rhExpr);
			lhExpr = new FunctionCall(editorModel, "||", exprList);
		}
	)*
	{
		return lhExpr;
	}
}

Expression conditionalAndExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression lhExpr = null;
	Expression rhExpr = null;
}
{
	lhExpr = equalityExpression(symbolTable, editorModel)
	(
		"&&" rhExpr = equalityExpression(symbolTable, editorModel)
		{
			List<Expression> exprList = new LinkedList<Expression>();
			exprList.add(lhExpr);
			exprList.add(rhExpr);
			lhExpr = new FunctionCall(editorModel, "&&", exprList);
		}
	)*
	{
		return lhExpr;
	}
}

Expression equalityExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression lhExpr = null;
	Expression rhExpr = null;
	Token t = null;
}
{
	lhExpr = relationalExpression(symbolTable, editorModel)
	(
		( t = "==" | t = "!=" ) rhExpr = relationalExpression(symbolTable, editorModel)
		{
			List<Expression> exprList = new LinkedList<Expression>();
			exprList.add(lhExpr);
			exprList.add(rhExpr);
			lhExpr = new FunctionCall(editorModel, t.image, exprList);
		}		
	)*
	{
		return lhExpr;
	}
}

Expression relationalExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression lhExpr = null;
	Expression rhExpr = null;
	Token t = null;
}
{
	lhExpr = additiveExpression(symbolTable, editorModel)
	(
		( t = "<" | t = ">" | t = "<=" | t = ">=" ) rhExpr = additiveExpression(symbolTable, editorModel)
		{
			List<Expression> exprList = new LinkedList<Expression>();
			exprList.add(lhExpr);
			exprList.add(rhExpr);
			lhExpr = new FunctionCall(editorModel, t.image, exprList);
		}
	)*
	{
		return lhExpr;
	}	
}

Expression additiveExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression lhExpr = null;
	Expression rhExpr = null;
	Token t = null;
}
{
	lhExpr = multiplicativeExpression(symbolTable, editorModel)
	(
		( t = "+" | t = "-" ) rhExpr = multiplicativeExpression(symbolTable, editorModel) 
		{
			List<Expression> exprList = new LinkedList<Expression>();
			exprList.add(lhExpr);
			exprList.add(rhExpr);
			lhExpr = new FunctionCall(editorModel, t.image, exprList);
		}
	)*
	{
		return lhExpr;
	}	
}

Expression multiplicativeExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression lhExpr = null;
	Expression rhExpr = null;
	Token t = null;
}
{
	lhExpr = unaryExpression(symbolTable, editorModel)
	(
		( t = "*" | t = "/" ) rhExpr = unaryExpression(symbolTable, editorModel)
		{
			List<Expression> exprList = new LinkedList<Expression>();
			exprList.add(lhExpr);
			exprList.add(rhExpr);
			lhExpr = new FunctionCall(editorModel, t.image, exprList);
		}
	)*
	{
		return lhExpr;
	}
}

Expression unaryExpression(SymbolTable symbolTable, EditorModel editorModel) :
{
	Expression expr = null;
}
{
	"!" expr = unaryExpression(symbolTable, editorModel)
	{
		List<Expression> exprList = new LinkedList<Expression>();
		exprList.add(expr);
		return new FunctionCall(editorModel, "!", exprList);
	}
	| expr = primaryExpression(symbolTable, editorModel) 
	{
		return expr;
	}	
}

Expression primaryExpression(SymbolTable symbolTable, EditorModel editorModel) :    ///// the second lowest unit.
{
	Expression expr = null;
}
{
	(
		"(" expr = expression(symbolTable, editorModel) ")"
//		| expr = predicate(symbolTable, editorModel)
		| expr = funcall(symbolTable, editorModel)
		| expr = variable(symbolTable) ( expr = obj_operation(expr, symbolTable, editorModel) )* 
		| expr = value()
		| expr = obj_creation(symbolTable, editorModel) ( expr = obj_operation(expr, symbolTable, editorModel) )*
		| expr = cls_operation(symbolTable, editorModel) ( expr = obj_operation(expr, symbolTable, editorModel) )*
	)
	{
		return expr;
	}
}

Value value() :
{
	Token v;
	Token[] vs = null;
}
{
	v=<INTEGER>		{ return new Value(Integer.valueOf(v.image).intValue()); }
|	v=<FLOAT>		{ return new Value(Double.valueOf(v.image).doubleValue()); }
|	v=<STRING>		{ return new Value(v.image); }
|   vs=owl() 		{
  						String value = vs[0].image + vs[1].image + vs[2].image;
  						return new Value(value); } 
//|	v=<ADDRESS>		{ return v.image; }
}

Variable variable(SymbolTable symbolTable) :
{
	Token v;
}
{
	v=<VARIABLE>		
	{ 
//		return new Variable(symbolTable.getSymbol(v.image));
		return new Variable(v.image);
		 
	}
}

FunctionCall funcall(SymbolTable symbolTable, EditorModel editorModel) :
{
	Token fn;
	List<Expression> el;
}
{
	"`" fn=<IDENTIFIER> el=object_arguments(symbolTable, editorModel) 
	{
		return new FunctionCall(editorModel, fn.image, el);
	}
}

ObjectCreation obj_creation(SymbolTable symbolTable, EditorModel editorModel) :
{
	Token t;
	List<Expression> exprList;
}
{
	<NEW> ( t = <CLASS_IDENTIFIER> | t = <IDENTIFIER> ) exprList=object_arguments(symbolTable, editorModel)
//	{
//		Class<?> clazz = null;
//		try {
//			clazz = _loader.loadClass(t.image);
//		} catch(ClassNotFoundException ex) {
//			throw new ParseException(ex.getLocalizedMessage());
//		}
//		return new ObjectCreation(clazz, exprList);	
//	}
{
  return null;
}
}

Expression cls_operation(SymbolTable symbolTable, EditorModel editorModel) :
{
	Token t = null;
	Token[] owl_token = { null,null,null };
	List<Expression> expressionList = null;
}
{
	( t = <CLASS_IDENTIFIER> | t = <IDENTIFIER> | owl_token = owl() ) [ LOOKAHEAD(2) expressionList = object_arguments(symbolTable, editorModel) ]
//	{
//		try {
//		  	StringTokenizer tokenizer = null;
//		  	if(t==null) {
//		  	  String parameter = owl_token[0].image + owl_token[1].image + owl_token[2].image;
//		  	  tokenizer = new StringTokenizer(t.image, "."); 
//		  	}else { 
//				tokenizer = new StringTokenizer(t.image, ".");
//			}
//			Class<?> clazz = _loader.loadClass(tokenizer);
//			Expression expression = new Value(clazz);
//			if (!tokenizer.hasMoreTokens()) {
//				throw new ParseException("require: field/method name");
//			}
//			while(tokenizer.hasMoreTokens()) {
//				String token = tokenizer.nextToken();
//				if (tokenizer.hasMoreTokens()) {
//					expression = new ObjectGetField(expression, token);
//				} else {
//					/*
//					 * MixedClassOperation占쏙옙 xx.xx.xx.xx() 占실댐옙 xx.xx.xx.xx 占쏙옙 占쏙옙 占쏙옙 占쌍댐옙.
//					 * 占쏙옙占쏙옙占쏙옙 占싸분울옙占쏙옙 call method 占쏙옙占쏙옙 get field 占쏙옙占쏙옙 占싯삼옙占쌔억옙 占싼댐옙.
//					 */
//					if (expressionList != null) {
//						expression = new ObjectInvokeMethod(expression, token, expressionList);
//					} else {
//						expression = new ObjectGetField(expression, token);
//					}
//				}
//			}
//			return expression;
//		} catch(ClassNotFoundException e) {
//			throw new ParseException(e.getLocalizedMessage());
//		}
//	}
{
  return null;
}
}

//Expression cls_operation(SymbolTable symbolTable, EditorModel editorModel) :
//{
//	Token t = null;
//	Token t2 = null;
//	Token[] owl_token = {null,null,null};
//	Token protocol_type = null;
//	Token namespace = null;
//	Token id = null;
//	List<Expression> expressionList = null;
//}
//{
//	( t = <CLASS_IDENTIFIER> (":" t2 = <IDENTIFIER> )* | t = <IDENTIFIER> (":" t2 = <IDENTIFIER> )* | owl_token = owl() ) [ LOOKAHEAD(2) expressionList = object_arguments(symbolTable, editorModel) ]
//	{
//		try {
//		  	StringTokenizer tokenizer;
//		  	Class<?> clazz;
//		  	Expression expression;
//			if(t==null) {
//			  protocol_type=owl_token[0];
//			  namespace=owl_token[1];
//			  id=owl_token[2];
//			  String tokenizerpar = protocol_type.image + namespace.image + id.image;
//			  tokenizer = new StringTokenizer(tokenizerpar, ".");
//			  clazz = _loader.loadClass(tokenizer);
//			  expression = new Value(clazz);
//			}
////			}else if(t2!=null) {
////			  String tokenizerpar = editorModel.getNameSpaceTable().getNameSpace(t.image).wrap(t2.image);
////			  System.out.println(tokenizerpar);
////			  tokenizer = new StringTokenizer(tokenizerpar, ".");
////			  expression = new Value(tokenizerpar);
////			}
//			else {
//			  tokenizer = new StringTokenizer(t.image, ".");
//			  clazz = _loader.loadClass(tokenizer);
//			  expression = new Value(clazz);
//			}
//			if (!tokenizer.hasMoreTokens()) {
//				throw new ParseException("require: field/method name");
//			}
//			while(tokenizer.hasMoreTokens()) {
//				String token = tokenizer.nextToken();
//				if (tokenizer.hasMoreTokens()) {
//					expression = new ObjectGetField(expression, token);
//				} else {
//					/*
//					 * MixedClassOperation占쏙옙 xx.xx.xx.xx() 占실댐옙 xx.xx.xx.xx 占쏙옙 占쏙옙 占쏙옙 占쌍댐옙.
//					 * 占쏙옙占쏙옙占쏙옙 占싸분울옙占쏙옙 call method 占쏙옙占쏙옙 get field 占쏙옙占쏙옙 占싯삼옙占쌔억옙 占싼댐옙.
//					 */
//					if (expressionList != null) {
//						expression = new ObjectInvokeMethod(expression, token, expressionList);
//					} else {
//						expression = new ObjectGetField(expression, token);
//					}
//				}
//			}
//			return expression;
//		} catch(ClassNotFoundException e) {
//			throw new ParseException(e.getLocalizedMessage());
//		}
//	}
//}

Expression obj_operation(Expression expression, SymbolTable symbolTable, EditorModel editorModel) :
{
	Token t = null;
	List<Expression> expressionList = null;
}
{
	( 
		LOOKAHEAD(2) "." t = <IDENTIFIER> [ LOOKAHEAD(2) expressionList = object_arguments(symbolTable, editorModel) ] 
		{
			if (expressionList == null) {
				return new ObjectGetField(expression, t.image);
			} else {
				return new ObjectInvokeMethod(expression, t.image, expressionList);
			}
			expressionList = null;
		}
	)+
	{
		return expression;
	}
}




/*
Predicate predicate(SymbolTable symbolTable, EditorModel editorModel) :
{
	Token kw;
	Token id;
	List<Expression> el;
	Relation r;
}
{
	"(" kw=<FACT> id=<IDENTIFIER> el=explist(symbolTable, editorModel) ")"
	{
		r = editorModel.getWorldModel().newRelation(id.image, el); 
		return new PredicateFact(id.image, r, editorModel.getWorldModel());
	}
	| "(" kw=<RETRIEVE> id=<IDENTIFIER> el=explist(symbolTable, editorModel) ")"
	{
		r = editorModel.getWorldModel().newRelation(id.image, el); 
		return new PredicateRetrieve(id.image, r, editorModel.getWorldModel());
	}
	| "(" kw=<ACHIEVE> id=<IDENTIFIER> el=explist(symbolTable, editorModel) ")"
	{
		r = editorModel.getWorldModel().newRelation(id.image, el); 
		return new PredicateAchieve(id.image, r, editorModel.getIntentionStructure());
	}
}
*/

